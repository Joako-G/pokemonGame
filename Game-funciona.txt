import { useEffect, useState } from 'react'
import { getPokemon } from '../servie'
import { MixPokemonsInGame } from '../Logic/MixPokemonInGame'
import PokemonList from './PokemonList'
import WinnerModal from './WinnerModal'
import { usePokemons } from './Hooks/usePokemons'

const Game = () => {
  const [index, setIndex] = useState(0) // Para recorrer la lista de pokemons de la API
  const [pokemon, setPokemon] = useState(null) // Pokemon para adivinar
  const [imgPokemon, setImgPokemon] = useState('') // Imagen del pokemon
  const [pokemonsIngGame, setPokemonsInGame] = useState([]) // Lista de pokemons para el juego(4)
  const [guessedPokemon, setGuessedPokemon] = useState(null) // Pokemon elegido por el jugador

  const [guessedAmount, setGuessedAmount] = useState(0)
  const [siguiente, setSiguiente] = useState(false)

  const [gameOver, setGameOver] = useState(false)
  const [showModal, setShowModal] = useState(false)
  const [isLoading, setIsLoading] = useState(false)

  /* NUEVO CODIGO */
  const { pokemonsList, amount, nextPage, refreshPokemons, refreshAmount } = usePokemons()

  useEffect(() => {
    setIsLoading(true)
    if (!pokemonsList) return

    const newPokemon = pokemonsList[index]
    if (newPokemon) {
      // console.log('Index:', pokemonsList.indexOf(newPokemon))
      setPokemon(newPokemon)
      setPokemonsInGame(MixPokemonsInGame(newPokemon, pokemonsList))
      getPokemon(newPokemon.url)
        .then(data => {
          setImgPokemon(data.sprites.other.home.front_default)
        })
        .catch(err => console.log('Error: ', err))
    }
  }, [pokemonsList, index])

  useEffect(() => {
    if (gameOver) {
      const timer = setTimeout(() => {
        setShowModal(true)
      }, 800)
      return () => clearInterval(timer)
    }
    if (isLoading) {
      const timer = setTimeout(() => {
        setIsLoading(false)
      }, 800)
      return () => clearInterval(timer)
    }
  }, [gameOver, isLoading])

  /*
    Agrego el pokemon a una lista y completo con 4 pokemons mas,
    luego mezclo la lista anterior para mostrar las opciones al jugador
    No hay pokemons repetidos
  */

  /**
   * Funcion que verifica si el usuario adivino el nombre del pokemon.
   * Recibe por parametro el nombre del pokemon seleccionado por el
   * jugador
   * @param {*} name
   */
  const checkName = (name) => {
    if (index === 2) {
      setGameOver(true)
    }
    setGuessedPokemon(pokemon.name)

    if (name === pokemon.name) {
      const newGuessedAmount = guessedAmount + 1
      setGuessedAmount(newGuessedAmount)
      console.log('CORRECT')
    }

    setSiguiente(true)
  }

  /**
   * Metodo para pasar a la siguiente ronda
   */
  const continueGame = () => {
    setImgPokemon('')
    const newIndex = index + 1
    setIndex(newIndex)

    refreshAmount()
    setGuessedPokemon(null)
    setSiguiente(false)
  }

  const nextGame = () => {
    setGameOver(false)
    setGuessedPokemon(null)
    setSiguiente(false)
    setShowModal(false)
    setIndex(0)
    setGuessedAmount(0)
    refreshPokemons(nextPage)
  }

  return (
    <div className='game'>
      <h4>Faltan: {amount} </h4>
      <div className='img-pokemon'>
        {isLoading && (<h1>Cargando imagen</h1>)}
        {!isLoading && (<img src={imgPokemon} alt='Image de pokemon' />)}
      </div>
      <PokemonList pokemonsInGame={pokemonsIngGame} checkName={checkName} guessedPokemon={guessedPokemon} />
      {
        siguiente && !gameOver && (<button className='siguiente' onClick={continueGame}> Continuar </button>)
      }
      {
        gameOver && showModal && (<WinnerModal guessedAmount={guessedAmount} restartGame={nextGame} gameOver={gameOver} />)
      }
    </div>
  )
}

export default Game
